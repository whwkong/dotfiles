# see: https://goo.gl/GC5BKQ for some ideas
# list original git cheat
cheat git_orig

# alias ls = ls-files
git ls          # git ls-files; shows file info in index and working tree

# show
git config -l/--list    # List all variables set in config file

# to only stash certain files, add the files you don't want stashed to the
# index.
# eg.
#     git add <stuff I want to keep>
git stash --keep-index

# discard all unsaved changes in git
git checkout -- .
git checkout path/to/file/to/revert

# To remove staged and working directory changes
git reset --hard

# To go 2 commits back
git reset --hard HEAD~2     # modifies both stage + working directory

# hard vs soft reset
# commits: - A - B - C (master)
# To leave index + working directory alone; HEAD simply rolls back to B.
git reset --soft B

# remove file from repo + filesystem
git rm

# remove only from git repo; leave filesystem untouched
git rm --cached

# push tags
git push --tags

# del tag
git tag --delete tagname


# show which branches are tracking a remote branche
git branch -vv

# set up-stream tracking branch
git branch -u upstream/foo
git branch --set-upstream-to=upstream/foo


# list the author of each line
git blame <file>
git blame <file> -L 1000,+5


# show contributors to file
git shortlog -s -n <object>
    -n, –numbered
        Sort output according to the number of commits per author
    -s, –summary
        Suppress commit descriptions, only provide commit count

# prunes all obsolete branches locally
git remote update --prune
git fetch --all --prune

# filtering a subdirectory (eg: stripping out a subdirectory like w statpage into its own repo)
git filter-branch --subdirectory-filter <directory/> -f
git remote set-url origin <>  # remember to set the new origin


# rebase and interactive squash
# see: cheat git-squash
git rebase -i master


```bash
class MyClass():
    def __init__(self):
        pass
```